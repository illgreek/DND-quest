'use client'

import { useState } from 'react'
import { useSession } from 'next-auth/react'

interface TutorialModalProps {
  isOpen: boolean
  onClose: () => void
}

export default function TutorialModal({ isOpen, onClose }: TutorialModalProps) {
  const { data: session } = useSession()
  const [currentStep, setCurrentStep] = useState(0)

  const tutorialSteps = [
    {
      title: "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ DND-Quests! üéÆ",
      content: "–ü–µ—Ä–µ—Ç–≤–æ—Ä—é–π—Ç–µ —Å–≤–æ—ó —â–æ–¥–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –µ–ø—ñ—á–Ω—ñ –∫–≤–µ—Å—Ç–∏ –≤ —Å—Ç–∏–ª—ñ Dungeons & Dragons!",
      image: "üéØ"
    },
    {
      title: "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–≤–µ—Å—Ç—ñ–≤",
      content: "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–≤–µ—Å—Ç' —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. –í–∏–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å, –Ω–∞–≥–æ—Ä–æ–¥—É —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –≤–∞—à–æ–≥–æ –∫–≤–µ—Å—Ç—É.",
      image: "‚öîÔ∏è"
    },
    {
      title: "–í–∞—à –≥–µ—Ä–æ–π",
      content: "–£ –≤–∞—à–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å, –¥–æ—Å–≤—ñ–¥, –∑–æ–ª–æ—Ç–æ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –í–∏–∫–æ–Ω—É–π—Ç–µ –∫–≤–µ—Å—Ç–∏ —â–æ–± –ø—ñ–¥–≤–∏—â—É–≤–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å!",
      image: "üõ°Ô∏è"
    },
    {
      title: "–î—Ä—É–∑—ñ —Ç–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—è",
      content: "–î–æ–¥–∞–≤–∞–π—Ç–µ –¥—Ä—É–∑—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä—é–π—Ç–µ –∫–≤–µ—Å—Ç–∏ –¥–ª—è –Ω–∏—Ö. –†–∞–∑–æ–º –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –µ–ø—ñ—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è!",
      image: "ü§ù"
    },
    {
      title: "–ì–æ—Ç–æ–≤–æ –¥–æ –ø—Ä–∏–≥–æ–¥!",
      content: "–¢–µ–ø–µ—Ä –≤–∏ –≥–æ—Ç–æ–≤—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –∫–≤–µ—Å—Ç —Ç–∞ –ø–æ—á–∞—Ç–∏ —Å–≤–æ—é –µ–ø—ñ—á–Ω—É –ø–æ–¥–æ—Ä–æ–∂!",
      image: "üöÄ"
    }
  ]

  const handleNext = () => {
    if (currentStep < tutorialSteps.length - 1) {
      setCurrentStep(currentStep + 1)
    } else {
      handleComplete()
    }
  }

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handleComplete = async () => {
    try {
      const response = await fetch('/api/profile/tutorial', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      })

      if (response.ok) {
        onClose()
        setCurrentStep(0)
      }
    } catch (error) {
      console.error('Error marking tutorial as complete:', error)
      onClose()
    }
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
        <div className="text-center mb-6">
          <div className="text-4xl mb-4">{tutorialSteps[currentStep].image}</div>
          <h2 className="text-2xl font-bold text-gray-800 mb-2">
            {tutorialSteps[currentStep].title}
          </h2>
          <p className="text-gray-600">
            {tutorialSteps[currentStep].content}
          </p>
        </div>

        <div className="flex justify-between items-center">
          <button
            onClick={handlePrevious}
            disabled={currentStep === 0}
            className={`px-4 py-2 rounded-lg font-medium ${
              currentStep === 0
                ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
          >
            –ù–∞–∑–∞–¥
          </button>

          <div className="flex space-x-2">
            {tutorialSteps.map((_, index) => (
              <div
                key={index}
                className={`w-2 h-2 rounded-full ${
                  index === currentStep ? 'bg-blue-500' : 'bg-gray-300'
                }`}
              />
            ))}
          </div>

          <button
            onClick={handleNext}
            className="px-6 py-2 bg-blue-500 text-white rounded-lg font-medium hover:bg-blue-600 transition-colors"
          >
            {currentStep === tutorialSteps.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç–∏' : '–î–∞–ª—ñ'}
          </button>
        </div>

        {currentStep === tutorialSteps.length - 1 && (
          <div className="mt-4 text-center">
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 text-sm"
            >
              –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –º–∞–Ω—É–∞–ª
            </button>
          </div>
        )}
      </div>
    </div>
  )
} 