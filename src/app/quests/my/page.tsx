'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import Link from 'next/link'
import { getHeroClassLabel, heroClasses } from '@/lib/heroClasses'
import { getCurrentLevel } from '@/lib/heroLevels'


interface Quest {
  id: string
  title: string
  description: string
  reward: number
  experience: number
  difficulty: string
  category: string
  status: string
  location?: string
  dueDate?: string
  isUrgent: boolean
  createdAt: string
  creator?: {
    id: string
    name?: string
    heroName?: string
    heroClass?: string
    experience?: number
  }
  receiver?: {
    id: string
    name?: string
    heroName?: string
    heroClass?: string
    experience?: number
  }
}

export default function MyQuests() {
  const { data: session, status } = useSession()
  const [quests, setQuests] = useState<Quest[]>([])
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState('all')
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')
  const [showCompleteModal, setShowCompleteModal] = useState(false)
  const [selectedQuest, setSelectedQuest] = useState<Quest | null>(null)

  const difficulties = {
    EASY: { label: '–õ–µ–≥–∫–∏–π', emoji: 'üü¢', color: 'text-green-400' },
    MEDIUM: { label: '–°–µ—Ä–µ–¥–Ω—ñ–π', emoji: 'üü°', color: 'text-yellow-400' },
    HARD: { label: '–í–∞–∂–∫–∏–π', emoji: 'üü†', color: 'text-orange-400' },
    EPIC: { label: '–ï–ø—ñ—á–Ω–∏–π', emoji: 'üî¥', color: 'text-red-400' }
  }

  const categories = {
    SHOPPING: { label: '–ü–æ–∫—É–ø–∫–∏', emoji: 'üõí' },
    CHORES: { label: '–ü–æ–±—É—Ç–æ–≤—ñ —Å–ø—Ä–∞–≤–∏', emoji: 'üßπ' },
    WORK: { label: '–†–æ–±–æ—Ç–∞', emoji: 'üíº' },
    PERSONAL: { label: '–û—Å–æ–±–∏—Å—Ç–µ', emoji: 'üë§' },
    HEALTH: { label: '–ó–¥–æ—Ä–æ–≤\'—è', emoji: 'üíä' },
    STUDY: { label: '–ù–∞–≤—á–∞–Ω–Ω—è', emoji: 'üìö' },
    GENERAL: { label: '–ó–∞–≥–∞–ª—å–Ω–µ', emoji: 'üìã' }
  }

  const statuses = {
    OPEN: { label: '–í—ñ–¥–∫—Ä–∏—Ç–∏–π', emoji: 'üîì', color: 'text-blue-400' },
    IN_PROGRESS: { label: '–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è', emoji: '‚ö°', color: 'text-yellow-400' },
    COMPLETED: { label: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', emoji: '‚úÖ', color: 'text-green-400' },
    FAILED: { label: '–ü—Ä–æ–≤–∞–ª–µ–Ω–æ', emoji: '‚ùå', color: 'text-red-400' },
    CANCELLED: { label: '–í—ñ–¥–∫–ª–∏–∫–∞–Ω–æ', emoji: 'üö´', color: 'text-gray-400' }
  }



  useEffect(() => {
    fetchQuests()
  }, [activeTab])

  const fetchQuests = async () => {
    try {
      setLoading(true)
      // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è activeTab —É –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è API
      let apiType = 'all'
      if (activeTab === 'assigned') {
        apiType = 'assigned_to_me'
      } else if (activeTab === 'created') {
        apiType = 'created_by_me'
      }
      
      const response = await fetch(`/api/quests?type=${apiType}`)
      
      if (response.ok) {
        const data = await response.json()
        setQuests(data)
      } else {
        setError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤–µ—Å—Ç—ñ–≤')
      }
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤–µ—Å—Ç—ñ–≤')
    } finally {
      setLoading(false)
    }
  }

  const handleAcceptQuest = async (questId: string) => {
    try {
      const response = await fetch(`/api/quests/${questId}/accept`, {
        method: 'POST'
      })

      if (response.ok) {
        fetchQuests()
        setSuccess('–ö–≤–µ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –π–æ–≥–æ –≤–∏–∫–æ–Ω–∞—Ç–∏.')
        setTimeout(() => setSuccess(''), 3000)
      }
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∫–≤–µ—Å—Ç—É')
    }
  }

  const handleCompleteQuest = async (questId: string) => {
    try {
      const response = await fetch(`/api/quests/${questId}/complete`, {
        method: 'POST'
      })

      if (response.ok) {
        const result = await response.json()
        console.log('Quest completion result:', result)
        
        fetchQuests()
        setShowCompleteModal(false)
        setSelectedQuest(null)
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        setTimeout(() => {
          window.location.reload()
        }, 1000)
        
        // Show success message
        let message = `–ö–≤–µ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –∑–¥–∞–Ω–æ! –û—Ç—Ä–∏–º–∞–Ω–æ: ${result.rewards.gold} ü™ô –∑–æ–ª–æ—Ç–∞ —Ç–∞ ${result.rewards.experience} ‚≠ê –¥–æ—Å–≤—ñ–¥—É`
        if (result.rewards.levelUp) {
          message += `\nüéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –ø—ñ–¥–≤–∏—â–∏–ª–∏—Å—è –¥–æ —Ä—ñ–≤–Ω—è ${result.user.heroLevel}!`
        }
        setSuccess(message)
        
        // Clear success message after 5 seconds
        setTimeout(() => setSuccess(''), 5000)
      }
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–≤–µ—Å—Ç—É')
    }
  }

  const handleCancelQuest = async (questId: string) => {
    try {
      const response = await fetch(`/api/quests/${questId}/cancel`, {
        method: 'POST'
      })

      if (response.ok) {
        fetchQuests()
        setSuccess('–ö–≤–µ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ!')
        setTimeout(() => setSuccess(''), 3000)
      } else {
        const errorData = await response.json()
        setError(errorData.error || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–Ω—è –∫–≤–µ—Å—Ç—É')
      }
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–Ω—è –∫–≤–µ—Å—Ç—É')
    }
  }

  const openCompleteModal = (quest: Quest) => {
    setSelectedQuest(quest)
    setShowCompleteModal(true)
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('uk-UA', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏–π–Ω—è—Ç–∏ –∫–≤–µ—Å—Ç
  const canAcceptQuest = (quest: Quest) => {
    return quest.status === 'OPEN' && 
           quest.receiver?.id === session?.user.id && 
           quest.creator?.id !== session?.user.id
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–¥–∞—Ç–∏ –∫–≤–µ—Å—Ç
  const canCompleteQuest = (quest: Quest) => {
    return quest.status === 'IN_PROGRESS' && 
           quest.receiver?.id === session?.user.id
  }

  if (status === 'loading') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 mx-auto mb-4 relative">
            <div className="absolute inset-0 animate-spin">
              <div className="w-full h-full border-4 border-transparent border-t-yellow-400 border-r-blue-400 rounded-full"></div>
            </div>
            <div className="absolute inset-2 bg-gray-800 rounded-full flex items-center justify-center">
              <span className="text-yellow-400 text-xs font-bold">‚öîÔ∏è</span>
            </div>
          </div>
          <h2 className="text-2xl font-bold text-yellow-400 mb-2">
            –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–≥–æ–¥...
          </h2>
          <p className="text-gray-300">
            –ì–æ—Ç—É—î–º–æ —Å–≤—ñ—Ç –¥–ª—è —Ç–≤–æ—ó—Ö –≥–µ—Ä–æ—ó–≤
          </p>
        </div>
      </div>
    )
  }

  if (!session) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl text-red-400 mb-4">–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ</h1>
          <p className="text-gray-300 mb-4">–ü–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–≤–µ—Å—Ç—ñ–≤</p>
          <Link href="/auth/signin" className="text-yellow-400 hover:text-yellow-300">
            –£–≤—ñ–π—Ç–∏
          </Link>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-yellow-400 mb-2">
            –ú–æ—ó –ö–≤–µ—Å—Ç–∏
          </h1>
          <p className="text-gray-300">
            –ö–µ—Ä—É–π —Å–≤–æ—ó–º–∏ –µ–ø—ñ—á–Ω–∏–º–∏ –º—ñ—Å—ñ—è–º–∏!
          </p>
        </div>

        {error && (
          <div className="bg-red-600 text-white p-4 rounded-lg mb-6">
            {error}
          </div>
        )}

        {/* Tabs */}
        <div className="flex flex-wrap gap-2 mb-6 justify-center">
          <button
            onClick={() => setActiveTab('all')}
            className={`px-6 py-3 rounded-lg font-medium transition-colors ${
              activeTab === 'all'
                ? 'bg-yellow-400 text-gray-900'
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            –í—Å—ñ –ö–≤–µ—Å—Ç–∏
          </button>
          <button
            onClick={() => setActiveTab('assigned')}
            className={`px-6 py-3 rounded-lg font-medium transition-colors ${
              activeTab === 'assigned'
                ? 'bg-yellow-400 text-gray-900'
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            –ö–≤–µ—Å—Ç–∏ –ú–µ–Ω—ñ
          </button>
          <button
            onClick={() => setActiveTab('created')}
            className={`px-6 py-3 rounded-lg font-medium transition-colors ${
              activeTab === 'created'
                ? 'bg-yellow-400 text-gray-900'
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            –ö–≤–µ—Å—Ç–∏ –≤—ñ–¥ –ú–µ–Ω–µ
          </button>
        </div>

        {/* Create Button */}
        <div className="text-center mb-6">
          <Link
            href="/quests/create"
            className="inline-flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg transition-colors"
          >
            <span>‚öîÔ∏è</span>
            –°—Ç–≤–æ—Ä–∏—Ç–∏ –ù–æ–≤–∏–π –ö–≤–µ—Å—Ç
          </Link>
        </div>

        {/* Quests List */}
        {loading ? (
          <div className="text-center py-12">
            <div className="w-16 h-16 mx-auto mb-4 relative">
              <div className="absolute inset-0 animate-spin">
                <div className="w-full h-full border-4 border-transparent border-t-yellow-400 border-r-blue-400 rounded-full"></div>
              </div>
              <div className="absolute inset-2 bg-gray-800 rounded-full flex items-center justify-center">
                <span className="text-yellow-400 text-xs font-bold">‚öîÔ∏è</span>
              </div>
            </div>
            <h2 className="text-xl font-bold text-yellow-400 mb-2">
              –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤–µ—Å—Ç—ñ–≤...
            </h2>
            <p className="text-gray-300">
              –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–≤–æ—ó –µ–ø—ñ—á–Ω—ñ –º—ñ—Å—ñ—ó
            </p>
          </div>
        ) : quests.length === 0 ? (
          <div className="text-center py-8">
            <div className="text-gray-400 text-xl">
              –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∫–≤–µ—Å—Ç—ñ–≤
            </div>
          </div>
        ) : (
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {quests.map((quest) => {
              const heroClass = heroClasses[quest.creator?.heroClass as keyof typeof heroClasses]
              const receiverClass = quest.receiver ? heroClasses[quest.receiver.heroClass as keyof typeof heroClasses] : null
              const creatorLevel = quest.creator?.heroClass ? getCurrentLevel(quest.creator.heroClass, quest.creator.experience || 0) : null

              return (
                <div key={quest.id} className="bg-gray-800 bg-opacity-50 rounded-lg p-6 border border-gray-700">
                  {/* Quest Header */}
                  <div className="flex justify-between items-start mb-4">
                    <div className="flex-1">
                      <h3 className="text-lg font-bold text-white mb-2">
                        {quest.title}
                      </h3>
                      <div className="flex items-center gap-2">
                        <span className="text-sm text-gray-400">
                          {heroClass?.emoji} {heroClass?.label}
                        </span>
                        <span className="text-gray-600">‚Ä¢</span>
                        <span className="text-sm text-gray-400">
                          {creatorLevel ? creatorLevel.title : '–†—ñ–≤–µ–Ω—å 1'}
                        </span>
                        {activeTab === 'assigned' && quest.creator && (
                          <>
                            <span className="text-gray-600">‚Ä¢</span>
                            <span className="text-sm text-gray-400">
                              –°—Ç–≤–æ—Ä–∏–≤: {quest.creator.heroName || quest.creator.name}
                            </span>
                          </>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Quest Description */}
                  <p className="text-gray-300 mb-4 line-clamp-2">
                    {quest.description}
                  </p>

                  {/* Quest Details */}
                  <div className="space-y-2 mb-4">
                    <div className="flex items-center gap-2 text-sm text-gray-400">
                      <span>üéØ</span>
                      <span>–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {difficulties[quest.difficulty as keyof typeof difficulties]?.emoji} {difficulties[quest.difficulty as keyof typeof difficulties]?.label}</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-gray-400">
                      <span>‚è∞</span>
                      <span>–î–µ–¥–ª–∞–π–Ω: {quest.dueDate ? new Date(quest.dueDate).toLocaleDateString('uk-UA') : '–ù–µ–º–∞—î'}</span>
                    </div>
                    {quest.receiver && (
                      <div className="flex items-center gap-2 text-sm text-gray-400">
                        <span>üë§</span>
                        <span>
                          {quest.receiver.id === session.user.id ? (
                            '–î–æ—Ä—É—á–µ–Ω–æ: –≤–∞–º'
                          ) : (
                            `–î–æ—Ä—É—á–µ–Ω–æ: ${receiverClass?.emoji} ${quest.receiver?.heroName || quest.receiver?.name}`
                          )}
                        </span>
                      </div>
                    )}
                  </div>

                  {/* Quest Status */}
                  <div className="mb-4">
                    <span className={`inline-block px-3 py-1 rounded-full text-sm font-medium ${
                      quest.status === 'OPEN' ? 'bg-blue-600 text-blue-100' :
                      quest.status === 'IN_PROGRESS' ? 'bg-yellow-600 text-yellow-100' :
                      quest.status === 'COMPLETED' ? 'bg-green-600 text-green-100' :
                      quest.status === 'FAILED' ? 'bg-red-600 text-red-100' :
                      quest.status === 'CANCELLED' ? 'bg-gray-600 text-gray-100' :
                      'bg-gray-600 text-gray-100'
                    }`}>
                      {quest.status === 'OPEN' ? 'üîì –í—ñ–¥–∫—Ä–∏—Ç–∏–π' :
                       quest.status === 'IN_PROGRESS' ? '‚ö° –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è' :
                       quest.status === 'COMPLETED' ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' :
                       quest.status === 'FAILED' ? '‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ' :
                       quest.status === 'CANCELLED' ? 'üö´ –í—ñ–¥–∫–ª–∏–∫–∞–Ω–æ' :
                       '‚ùì –ù–µ–≤—ñ–¥–æ–º–æ'}
                    </span>
                  </div>

                  {/* Quest Rewards */}
                  <div className="flex justify-between items-center mb-4">
                    <div className="flex gap-4">
                      <div className="text-center">
                        <div className="text-yellow-400 font-bold">{quest.reward}</div>
                        <div className="text-xs text-gray-400">ü™ô –ó–æ–ª–æ—Ç–æ</div>
                      </div>
                      <div className="text-center">
                        <div className="text-blue-400 font-bold">{quest.experience}</div>
                        <div className="text-xs text-gray-400">‚≠ê –î–æ—Å–≤—ñ–¥</div>
                      </div>
                    </div>
                  </div>

                  {/* Quest Actions */}
                  {quest.status === 'OPEN' && quest.receiver?.id === session.user.id && quest.creator?.id !== session.user.id && (
                    <button
                      onClick={() => handleAcceptQuest(quest.id)}
                      className="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition-colors mb-2"
                    >
                      –ü—Ä–∏–π–Ω—è—Ç–∏ –ö–≤–µ—Å—Ç
                    </button>
                  )}

                  {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–≤–µ—Å—Ç—ñ–≤, –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö —Å–æ–±—ñ */}
                  {quest.status === 'OPEN' && quest.receiver?.id === session.user.id && quest.creator?.id === session.user.id && (
                    <button
                      onClick={() => handleAcceptQuest(quest.id)}
                      className="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition-colors mb-2"
                    >
                      –ü–æ—á–∞—Ç–∏ –í–∏–∫–æ–Ω–∞–Ω–Ω—è
                    </button>
                  )}

                  {/* –ö–Ω–æ–ø–∫–∞ –∑–¥–∞—á—ñ –¥–ª—è –∫–≤–µ—Å—Ç—ñ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–≤–∫–ª—é—á–∞—é—á–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –¥–ª—è —Å–µ–±–µ) */}
                  {quest.status === 'IN_PROGRESS' && quest.receiver?.id === session.user.id && (
                    <button
                      onClick={() => openCompleteModal(quest)}
                      className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition-colors mb-2"
                    >
                      –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ö–≤–µ—Å—Ç
                    </button>
                  )}

                  {/* –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∫–≤–µ—Å—Ç—ñ–≤, —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º */}
                  {quest.creator?.id === session.user.id && quest.status === 'OPEN' && !quest.receiver && (
                    <div className="text-center text-gray-400 text-sm mb-2">
                      –ö–≤–µ—Å—Ç –æ—á—ñ–∫—É—î –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
                    </div>
                  )}

                  {/* –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∫–≤–µ—Å—Ç—ñ–≤, –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö —Å–æ–±—ñ */}
                  {quest.creator?.id === session.user.id && quest.status === 'OPEN' && quest.receiver?.id === session.user.id && (
                    <div className="text-center text-green-400 text-sm mb-2">
                      ‚úÖ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –≤–∞–º
                    </div>
                  )}

                  {/* –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∫–≤–µ—Å—Ç—ñ–≤, —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –¥–ª—è —Å–µ–±–µ —ñ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è */}
                  {quest.creator?.id === session.user.id && quest.status === 'IN_PROGRESS' && quest.receiver?.id === session.user.id && (
                    <div className="text-center text-blue-400 text-sm mb-2">
                      ‚ö° –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤–∞–º–∏
                    </div>
                  )}

                  {/* –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–Ω—è –¥–ª—è –∫–≤–µ—Å—Ç—ñ–≤, —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –¥—Ä—É–≥—É) */}
                  {quest.creator?.id === session.user.id && quest.status === 'OPEN' && quest.receiver && quest.receiver.id !== session.user.id && (
                    <button
                      onClick={() => handleCancelQuest(quest.id)}
                      className="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition-colors mb-2"
                    >
                      –í—ñ–¥–∫–ª–∏–∫–∞—Ç–∏ –ö–≤–µ—Å—Ç
                    </button>
                  )}

                  {/* –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–∏—Ö –∫–≤–µ—Å—Ç—ñ–≤ */}
                  {quest.status === 'CANCELLED' && (
                    <div className="text-center text-gray-400 text-sm mb-2">
                      –ö–≤–µ—Å—Ç –±—É–ª–æ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ
                    </div>
                  )}

                  <div className="text-xs text-gray-500 text-center">
                    –°—Ç–≤–æ—Ä–µ–Ω–æ {new Date(quest.createdAt).toLocaleDateString('uk-UA')}
                  </div>
                </div>
              )
            })}
          </div>
        )}

        {/* Complete Quest Modal */}
        {showCompleteModal && selectedQuest && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
              <h3 className="text-xl font-bold text-yellow-400 mb-4">
                –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ö–≤–µ—Å—Ç
              </h3>
              <p className="text-gray-300 mb-6">
                –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∫–≤–µ—Å—Ç "{selectedQuest.title}"?
              </p>
              <div className="flex gap-4">
                <button
                  onClick={() => handleCompleteQuest(selectedQuest.id)}
                  className="flex-1 bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition-colors"
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç–∏
                </button>
                <button
                  onClick={() => {
                    setShowCompleteModal(false)
                    setSelectedQuest(null)
                  }}
                  className="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded transition-colors"
                >
                  –°–∫–∞—Å—É–≤–∞—Ç–∏
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Success Message */}
        {success && (
          <div className="fixed top-4 right-4 bg-green-600 text-white p-4 rounded-lg shadow-lg z-50 max-w-md">
            <div className="whitespace-pre-line">{success}</div>
          </div>
        )}
      </div>
    </div>
  )
} 