// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // DND Hero properties
  heroName      String?
  heroClass     String?   // Warrior, Mage, Rogue, etc.
  heroLevel     Int       @default(1)
  experience    Int       @default(0)
  gold          Int       @default(0)
  
  // User preferences
  hasSeenTutorial Boolean @default(false)
  themeType       String  @default("STANDARD") // STANDARD, CLASS
  
  // Relationships
  accounts      Account[]
  sessions      Session[]
  
  // Quests
  createdQuests Quest[]   @relation("QuestCreator")
  acceptedQuests Quest[]  @relation("QuestReceiver")
  
  // Friendships
  sentFriendRequests     Friendship[] @relation("FriendRequestSender")
  receivedFriendRequests Friendship[] @relation("FriendRequestReceiver")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Friendship {
  id        String   @id @default(cuid())
  senderId  String
  receiverId String
  status    String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User @relation("FriendRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("FriendRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Quest {
  id          String   @id @default(cuid())
  title       String
  description String
  reward      Int      @default(0) // Gold reward
  experience  Int      @default(0) // XP reward
  difficulty  String   @default("EASY") // EASY, MEDIUM, HARD, EPIC
  status      String   @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED, FAILED
  category    String   @default("GENERAL") // SHOPPING, CHORES, WORK, PERSONAL, etc.
  
  // Quest details
  location    String?
  dueDate     DateTime?
  isUrgent    Boolean  @default(false)
  
  // Relationships
  creatorId   String
  creator     User     @relation("QuestCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  
  receiverId  String?
  receiver    User?    @relation("QuestReceiver", fields: [receiverId], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  acceptedAt  DateTime?
  completedAt DateTime?
}
